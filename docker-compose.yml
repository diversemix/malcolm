version: '3'
services:
  # Underlying services
  postgres:
    image: postgres:11
    ports:
      - "5432:${DB_PORT}"
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    networks:
      - infra_postgres
    volumes:
      - pg-data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - infra_rabbit

  etcd1:
    image: gcr.io/etcd-development/etcd:v3.3
    restart: unless-stopped
    healthcheck:
      test: "etcdctl endpoint health"
      interval: 1m
      timeout: 10s
      retries: 3
    command: /usr/local/bin/etcd --data-dir=/etcd-data
    environment:
      ETCDCTL_API: 3
      ETCD_DEBUG: 1
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://127.0.0.1:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_ADVERTISE_CLIENT_URLS: http://127.0.0.1:2379
      ETCD_INITIAL_CLUSTER: default=http://127.0.0.1:2380
    ports:
      - "2379:2379"
      - "2380:2380"
    volumes:
      - ./data:/etcd-data

  # Support Services

  # NOTE: This will eventually be removed when other services start using the message bus
  message-bus-tester:
    image: node:10
    ports:
      - "3002:3002"
    working_dir: "/service/message-bus-tester"
    command: ["bash", "-c", "yarn && yarn start:dev"]
    healthcheck:
      test: "curl localhost:3002/health"
      interval: 1m
      timeout: 10s
      retries: 3
    volumes:
      - ./message-bus-tester/:/service/message-bus-tester/:z
      - ./lib/:/service/lib/:z
    networks:
      - infra_api
      - infra_rabbit
    depends_on:
      - rabbitmq

  audit:
    image: node:10
    ports:
      - "3004:3004"
    working_dir: "/service/audit"
    command: ["bash", "-c", "yarn && yarn start:dev"]
    healthcheck:
      test: "curl localhost:3004/health"
      interval: 1m
      timeout: 10s
      retries: 3
    volumes:
      - ./audit/:/service/audit/:z
      - ./lib/:/service/lib/:z
    networks:
      - infra_api
      - infra_rabbit
    depends_on:
      - rabbitmq

  continuum-auth:
    image: node:10
    ports:
      - "${AUTHENTICATION_PORT}:${AUTHENTICATION_PORT}"
    working_dir: "/service/continuum-auth"
    healthcheck:
      test: "curl localhost:3001/health"
      interval: 1m
      timeout: 10s
      retries: 3
    command: ["bash", "-c", "yarn && yarn start:dev"]
    environment:
      AUTHENTICATION_JWT_SECRET: ${AUTHENTICATION_JWT_SECRET}
      CONTINUUM_LOGIN_JWT_SECRET: ${CONTINUUM_LOGIN_JWT_SECRET}
      CONTINUUM_LOGIN_URL: ${CONTINUUM_LOGIN_URL}
      CONTINUUM_LOGIN_PORT: ${CONTINUUM_LOGIN_PORT}
      CLIENT_PORT: ${CLIENT_PORT}
    volumes:
      - ./continuum-auth/:/service/continuum-auth/:z
      - ./lib/:/service/lib/:z
    networks:
      - infra_api

  mock-continuum-login:
    image: node:10
    ports:
      - "3003:3003"
    working_dir: "/mock-continuum-login"
    healthcheck:
      test: "curl localhost:3003/health"
      interval: 1m
      timeout: 10s
      retries: 3
    command: ["bash", "-c", "yarn && yarn start:dev"]
    environment:
      CONTINUUM_LOGIN_PORT: ${CONTINUUM_LOGIN_PORT}
      AUTHENTICATION_URL: ${AUTHENTICATION_URL}
      AUTHENTICATION_PORT: ${AUTHENTICATION_PORT}
    volumes:
      - ./mock-continuum-login/:/mock-continuum-login/:z
    networks:
      - infra_api

  # Domain Services
  server:
    image: node:10
    ports:
      - "3000:${SERVER_PORT}"
    environment:
      SERVER_PORT: ${SERVER_PORT}
      DB_TYPE: ${DB_TYPE}
      DB_HOST: "postgres"
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
    working_dir: "/service/server"
    healthcheck:
      test: "curl localhost:3000/health"
      interval: 1m
      timeout: 10s
      retries: 3
    command: ["bash", "-c", "yarn && yarn run start:dev"]
    volumes:
      - ./server/:/service/server/:z
      - ./lib/:/service/lib/:z
    networks:
      - infra_postgres
      - infra_api
    depends_on: ["postgres"]

  client:
    image: node:10
    ports:
      - "9000:${CLIENT_PORT}"
    working_dir: "/client"
    command: ["bash", "-c", "yarn && yarn run start --host 0.0.0.0"]
    volumes:
      - ./client/:/client/:z
    environment:
      CLIENT_PORT: ${CLIENT_PORT}
      CLIENT_API_URL: ${CLIENT_API_URL}
      CLIENT_API_PROXY_URL: "http://server"
      CLIENT_API_PROXY_ENDPOINT: ${CLIENT_API_PROXY_ENDPOINT}
      SERVER_PORT: ${SERVER_PORT}
    networks:
      - infra_api
    depends_on: ["server"]

networks:
  infra_postgres:
  infra_api:
  infra_rabbit:

volumes:
  pg-data:
