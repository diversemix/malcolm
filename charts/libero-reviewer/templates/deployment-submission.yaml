apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "libero-reviewer.fullname" . }}-submission
  labels:
    app.kubernetes.io/name: {{ include "libero-reviewer.fullname" . }}-submission
    helm.sh/chart: {{ include "libero-reviewer.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: submission
spec:
  replicas: {{ .Values.submission.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "libero-reviewer.fullname" . }}-submission
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: submission
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "libero-reviewer.fullname" . }}-submission
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: submission
    spec:
      terminationGracePeriodSeconds: {{ .Values.submission.terminationGracePeriodSeconds }}
      containers:
        - name: {{ .Chart.Name }}-submission
          image: "{{ .Values.submission.image.repository }}:{{ .Values.submission.image.tag }}"
          imagePullPolicy: {{ .Values.submission.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          resources:
{{ toYaml .Values.resources | indent 12 }}

          env:
            - name: AUTHENTICATION_JWT_SECRET
              valueFrom:
                  secretKeyRef:
                    name: {{ .Values.authenticationJwtSecret | quote }}
                    key: reviewer-auth-secret
            - name: USER_API_URL
              value: 'http://{{ include "libero-reviewer.fullname" . }}-continuum-adaptor:{{ .Values.continuumAdaptor.port }}'
            - name: MAX_FILE_SIZE_IN_BYTES
              value: "{{ .Values.submission.maxFileSizeInBytes }}"

            {{- if .Values.postgresql.enabled }}
            - name: DATABASE_NAME
              value: {{ .Values.postgresql.postgresqlDatabase | quote }}
            - name: DATABASE_USER
              value: {{ .Values.postgresql.postgresqlUsername | quote }}
            - name: DATABASE_HOST
              value: "{{ include "libero-reviewer.fullname" . }}-postgresql"
            - name: DATABASE_PASSWORD
              valueFrom:
                  secretKeyRef:
                    name: {{ .Values.postgresql.existingSecret | quote }}
                    key: postgresql-password
            {{- else }}
            - name: DATABASE_NAME
              value: {{ .Values.database.dbName | quote }}
            - name: DATABASE_USER
              value: {{ .Values.database.dbUser | quote }}
            - name: DATABASE_HOST
              value: {{ .Values.database.dbHost | quote }}
            - name: DATABASE_PASSWORD
              valueFrom:
                  secretKeyRef:
                    name: {{ .Values.database.dbPasswordSecret | quote }}
                    key: {{ .Values.database.dbPasswordKey | quote }}
            {{- end }}
            - name: DATABASE_PORT
              value: "5432"

            - name: S3_AWS_ENDPOINT
              value: "{{ .Values.submission.s3.endpoint}}"
            - name: S3_ACCESS_KEY_ID
              valueFrom:
                  secretKeyRef:
                    name: {{ .Values.submission.s3.secret | quote }}
                    key: id
            - name: S3_SECRET_ACCESS_KEY
              valueFrom:
                  secretKeyRef:
                    name: {{ .Values.submission.s3.secret | quote }}
                    key: access-key
            - name: S3_FORCE_PATH_STYLE
              value: "{{ .Values.submission.s3.forcePathStyle}}"
            - name: S3_FILE_BUCKET
              value: "{{ .Values.submission.s3.bucket}}"


            - name: SES_ACCESS_KEY_ID
              valueFrom:
                  secretKeyRef:
                    name: {{ .Values.submission.mail.sesSecret | quote }}
                    key: id

            - name: SES_SECRET_ACCESS_KEY
              valueFrom:
                  secretKeyRef:
                    name: {{ .Values.submission.mail.sesSecret | quote }}
                    key: access-key

            - name: SES_REGION
              value: "{{ .Values.submission.mail.sesRegion}}"

            - name: SEND_MAIL
              value: "{{ .Values.submission.mail.sendMail}}"

            - name: MAIL_SENDER
              value: "{{ .Values.submission.mail.sender}}"

            - name: MAX_QL_COMPLEXITY
              value: "{{ .Values.submission.graphQL.maxComplexity}}"
            - name: MAX_QL_DEPTH
              value: "{{ .Values.submission.graphQL.maxDepth}}"

            - name: SCIENCE_BEAM_URL
              value: "{{ .Values.submission.sciencebeam.convertUrl}}"
            - name: SCIENCE_BEAM_TIMEOUT
              value: "{{ .Values.submission.sciencebeam.timeout}}"

            - name: MECA_S3_PATH
              value: {{ .Values.submission.meca.s3Path | quote }}
            - name: MECA_SFTP_PATH
              value: {{ .Values.submission.meca.sftpPath | quote }}
            - name: MECA_SFTP_PORT
              value: {{ .Values.submission.meca.sftpPort | quote }}
            - name: MECA_SFTP_HOST
              valueFrom:
                  secretKeyRef:
                    name: {{ .Values.submission.meca.sftpSecret | quote }}
                    key: host
            - name: MECA_SFTP_USERNAME
              valueFrom:
                  secretKeyRef:
                    name: {{ .Values.submission.meca.sftpSecret | quote }}
                    key: user
            - name: MECA_SFTP_PASSWORD
              valueFrom:
                  secretKeyRef:
                    name: {{ .Values.submission.meca.sftpSecret | quote }}
                    key: password
            - name: MECA_EMAIL_PREFIX
              value: {{ .Values.submission.meca.emailPrefix | quote }}
            - name: MECA_EMAIL_RECIPIENT
              value: {{ .Values.submission.meca.emailRecipient | quote }}
            - name: MECA_API_KEY
              valueFrom:
                  secretKeyRef:
                    name: {{ .Values.submission.meca.apiSecret | quote }}
                    key: key
            
            {{- if .Values.newRelic.enabled }}
            - name: INCLUDE_NEW_RELIC
              value: "true"
            - name: NEW_RELIC_NO_CONFIG_FILE
              value: "true"
            - name: NEW_RELIC_APP_NAME
              value: {{ .Values.newRelic.appName | quote }}
            - name: NEW_RELIC_LICENSE_KEY
              valueFrom:
                  secretKeyRef:
                    name: {{ .Values.newRelic.licenseKeySecret | quote }}
                    key: key
            {{- range $name, $value := .Values.newRelic.additionalEnvironmentVariables }}
            - name: {{ $name }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}

      initContainers:
        - name: {{ .Chart.Name }}-load-db-schema
          image: "{{ .Values.submissionDbSchema.image.repository }}:{{ .Values.submissionDbSchema.image.tag }}"
          command: ["sh", "-c", "(psql -q -t -c \"select count(*) from information_schema.tables where table_schema='public';\" | xargs ) && psql -f  /docker-entrypoint-initdb.d/xpub-schema.sql"]
          env:
            {{- if .Values.postgresql.enabled }}
            - name: PGHOST
              value: '{{ include "libero-reviewer.fullname" . }}-postgresql'
            - name: PGUSER
              value: "{{ .Values.postgresql.postgresqlUsername }}"
            - name: PGPASSWORD
              valueFrom:
                  secretKeyRef:
                    name: {{ .Values.postgresql.existingSecret | quote }}
                    key: postgresql-password
            - name: PGDATABASE
              value: "{{ .Values.postgresql.postgresqlDatabase }}"
            {{- else }}
            - name: PGDATABASE
              value: {{ .Values.database.dbName | quote }}
            - name: PGUSER
              value: {{ .Values.database.dbUser | quote }}
            - name: PGHOST
              value: {{ .Values.database.dbHost | quote }}
            - name: PGPASSWORD
              valueFrom:
                  secretKeyRef:
                    name: {{ .Values.database.dbPasswordSecret | quote }}
                    key: {{ .Values.database.dbPasswordKey | quote }}
            {{- end }}
            - name: PGPORT
              value: "5432"
